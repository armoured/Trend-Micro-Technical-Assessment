service: users
frameworkVersion: "=2.5.0"

package:
  exclude:
    - .vscode/**
    - .idea/**

plugins:
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, "dev"}
  region:  ${opt:region, "ap-southeast-2"}
  stackName: ${self:service}-${self:provider.stage}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    DYNAMODB_USERS: ${cf:ddb-${self:provider.stage}.UsersTableNameExport}
  role: UsersServiceRole
  
functions:
  create_user:
    handler: users/handler.handle_http
    name: ${self:provider.stackName}-create_user
    events:
      - http:
          path: users
          method: post

  get_users:
    handler: users/handler.handle_http
    name: ${self:provider.stackName}-get_users
    events:
      - http:
          path: users
          method: get

resources:
  Resources:

    UsersServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: UsersServiceRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "events.amazonaws.com"
                  - "apigateway.amazonaws.com"
                AWS:
                  - "arn:aws:iam::#{AWS::AccountId}:user/mitchtest"
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          - 
            PolicyName: LogsPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
          - 
            PolicyName: DynamoDBWriteAccessPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - "arn:aws:dynamodb:*:#{AWS::AccountId}:table/${self:provider.environment.DYNAMODB_USERS}" 
          # This policy makes credentials not readable.
          - 
            PolicyName: DynamoDBReadAccessExcludeCredentials
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - 
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:GetItem"
                    - "dynamodb:BatchGetItem"
                  Resource:
                    - "arn:aws:dynamodb:*:#{AWS::AccountId}:table/${self:provider.environment.DYNAMODB_USERS}"
                    - "arn:aws:dynamodb:*:#{AWS::AccountId}:table/${self:provider.environment.DYNAMODB_USERS}/index/EmailIndex"
                  Condition:
                    ForAllValues:StringEquals: 
                      dynamodb:Attributes: 
                        - "id"
                        - "firstname"
                        - "lastname"
                        - "email"
                        - "username"
                    StringEqualsIfExists: 
                      dynamodb:Select: "SPECIFIC_ATTRIBUTES"
                      dynamodb:ReturnValues: 
                        - "NONE"
                        - "UPDATED_OLD"
                        - "UPDATED_NEW"  
          - 
            PolicyName: KMSCreateKeyPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - kms:CreateKey
                  Resource: "*"  
          - 
            PolicyName: KMSEncryptPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - kms:Encrypt
                    - kms:TagResource
                  Resource: 
                    - "arn:aws:kms:*:#{AWS::AccountId}:key/*"                                                            
                       